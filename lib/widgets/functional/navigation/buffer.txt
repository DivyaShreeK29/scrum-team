import 'dart:html';
import 'dart:math';

import 'package:flutter/material.dart';
import 'package:scrum_poker/widgets/functional/navigation/navigation_util.dart';
import 'package:scrum_poker/widgets/functional/landing_page.dart';
import 'package:scrum_poker/widgets/functional/navigation/router_config.dart';
import 'package:scrum_poker/widgets/functional/page_not_found.dart';
import '../home_page.dart';

class RouteDirectory {
  static final root = '/';
  static final homePage = ({sessionId}) => '/home/$sessionId';
}

class AppRoutePath {
  final sessionId;
  final bool isUnknownRoute;
  AppRoutePath.home()
      : sessionId = null,
        isUnknownRoute = false;

  AppRoutePath.scrumSessionHome(this.sessionId) : isUnknownRoute = false;

  AppRoutePath.unknownRoute()
      : this.sessionId = -1,
        isUnknownRoute = true;

  bool get isSessionHomePage => (sessionId != null);

  bool get isHomePage => sessionId != -1;
  void printString() => print(sessionId);
}

/*
 * Defines all the routes in the class
 */
var routerMap = {
  "/": (context, pathParameters, queryParameters) =>
      MaterialPageRoute(builder: (context) => LandingPage()),
  "/home/:sessionId": (context, pathParameters, queryParameters) =>
      MaterialPageRoute(
          builder: (context) =>
              ScrumSessionPage(id: pathParameters["sessionId"])),
  "/*": (context, pathParameters, queryParameters) =>
      MaterialPageRoute(builder: (context) => PageNotFound()),
};

class NavigationRouter extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _NavigationRouterState();
}

class _NavigationRouterState extends State<NavigationRouter> {
  AppRouterDelegate _appRouterDelegate = AppRouterDelegate();
  AppRouteInformationParser _appRouteInformationParser =
      AppRouteInformationParser();
  @override
  Widget build(BuildContext context) {
    return MaterialApp.router(
        routerDelegate: _appRouterDelegate,
        routeInformationParser: _appRouteInformationParser);
  }
}
// class NavigationRouter extends StatelessWidget {
//   @override
//   Widget build(BuildContext context) {
//       return MaterialApp(
//         onGenerateRoute: (route){
//            RouteConfig routeConfig = NavigationUtil.resolveRouteToWidget(route.name!, routerMap);
//            print("confing: ${routeConfig.route},${routeConfig.pathParameters}");
//            return routeConfig.navigateToRoute(context);
//         },

//       );
//   }

// }

class AppRouterDelegate extends RouterDelegate<AppRoutePath>
    with ChangeNotifier, PopNavigatorRouterDelegateMixin<AppRoutePath> {
  final GlobalKey<NavigatorState> navigatorKey;
  bool show404 = false;
  String activeRoute = "landing";
  String scrumSessionId = "";

  AppRouterDelegate() : navigatorKey = GlobalKey<NavigatorState>();

  void navigateToSession(String sessionId) {
    activeRoute = "session";
    sessionId = sessionId;
    print(
        "in navigate to session about to call notify change listener sessioID = $sessionId");
    notifyListeners();
  }

  @override
  Widget build(BuildContext context) {
    print("Build called... session id is $scrumSessionId");
    return Navigator(
      key: navigatorKey,
      pages: [
        if (activeRoute == 'landing')
          MaterialPage(
              child: LandingPage(
                routerDelegate: this,
                onTap: navigateToSession,
              ),
              key: ValueKey('Landing')),
        if (activeRoute == 'session')
          MaterialPage(
              child: ScrumSessionPage(id: scrumSessionId), key: ValueKey('Home')),
        if (activeRoute == 'unknown')
          MaterialPage(child: PageNotFound(), key: ValueKey('unknown'))
      ],
      onPopPage: (route, result) {
        if (!route.didPop(result)) return false;

        notifyListeners();
        return true;
      },
    );
  }

  @override
  Future<void> setNewRoutePath(AppRoutePath path) async {
    print("set new route path called.. ${path.toString()}");
    //activeRoute = "landing";
  }
}

class AppRouteInformationParser extends RouteInformationParser<AppRoutePath> {
  @override
  Future<AppRoutePath> parseRouteInformation(
      RouteInformation routeInformation) async {
    final uri = Uri.parse(routeInformation.location!);
    //  RouteConfig routeConfig = NavigationUtil.resolveRouteToWidget(routeInformation.location!, routerMap);
    //print("confing: ${routeConfig.route},${routeConfig.pathParameters}");
    if (uri.pathSegments.length == 0) {
      return AppRoutePath.home();
    } else {
      return AppRoutePath.scrumSessionHome("1");
    }
  }

  @override
  RouteInformation restoreRouteInformation(AppRoutePath configuration) {
    print("resoutre route informaiton");
    if (configuration.isSessionHomePage) {
      return RouteInformation(location: '/sessions/${configuration.sessionId}');
    }

    if (configuration.isHomePage) {
      return RouteInformation(location: '/');
    }
    return RouteInformation(location: '/404');
  }
}

class LandingMaterialPage extends Page {
  @override
  Route createRoute(BuildContext context) {
    return MaterialPageRoute(
        settings: this,
        builder: (context) {
          return LandingPage();
        });
  }
}


/*
routes: {
          Routes.root:(context)=>LandingPage(),
          Routes.homePage:(context)=>HomePage()
      },
      */